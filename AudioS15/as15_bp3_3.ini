#
# Audio Sculpture 1.5 - IPL Part#3.3 - BKP $78c82
#
# Neutralize track#3 protection (2nd part):
# Hidden data in gap (HDG),
# sector data with no ID (SNI),
# invalid data in gap (IDG),
# invalid track number (ITN),
# ID within ID (IWI),
# write splice inside sector (SIS).
#
# Sector#10 of track#3 (that crosses the index and the write splice)
# has been read at $7a9d6 (1024 bytes).
# The protection computes a checksum on the 1024 bytes of this sector
# and saves the checksum value at $60.
# The copy-protection verifies if the computed checksum value can be
# found in an array of 10 entries. If the checksum is found (it is valid)
# then the copy-protection goes to the next step (see as15_bp3_4.ini).
# Otherwise, the copy-protection restarts the verification of sector#10:
# the sector is re-loaded, the checksum is re-computed and re-verified.
# The validation of the checksum is performed in loop until it succeeds.
# 
# In case of a copy, the content of sector#10 is incorrect, which leads to
# an invalid checksum value (and thus the copy-protection gets stuck).
# Here, we modify the register (D0) containing the incorrect checksum
# value with the expected value.
#
# IMPORTANT: in this version of the IPL (AS 1.5) the validation of the
# checksum has been disabled. If the checksum is invalid (it does not match
# an entry in the array containing expected values), the protection code
# just continues as if the checksum was correct.
# This is different from what is done in AS 1.2 and AS 1.3, where an
# invalid checksum leads to reload the sector and reverify the checksum
# (as described above).
# Note that the protection code of the IPL in AS 1.2 and 1.3 has a bug!
# The routine that loads sector#10 of track#3 expects the stack pointer
# (A7) to point to the DMA mode/status register ($ff8606).
# But after an invalid checksum has been detected, the code branches to
# the loading routine with a wrong stack pointer (not pointing to
# $ff8606). Therefore the copy-protection crashes.
# Under Hatari, fixing A7 on-the-fly makes the copy-protection works
# correctly, ie sector#10 is correctly reloaded and the checksum
# re-verified.
#

# Dump the code which computes a checksum on the 1024 bytes of sector#10
d $78c68-$78c88

# Here is the corresponding dump:
# $00078c68: 3e3c 01fe    move.w    #$1fe,d7
# $00078c6c: 7000         moveq     #0,d0
# $00078c6e: d090         add.l     (a0),d0
# $00078c70: 5448         addq.w    #2,a0
# $00078c72: 4640         not.w     d0
# $00078c74: 4840         swap      d0
# $00078c76: e0b0         roxr.l    d0,d0
# $00078c78: 0140         bchg      d0,d0
# $00078c7a: e170         roxl.w    d0,d0
# $00078c7c: 4440         neg.w     d0
# $00078c7e: 51cf ffee    dbra      d7,$78c6e
# $00078c82: 43f8 0060    lea       $0060.w,a1
# $00078c86: 2280         move.l    d0,(a1)

# Dump the code which verifies the checksum value (but does nothing in
# case of a wrong value).
d $78dfc-$78e0e
d $78bd6-$78bdc

# Here is the corresponding dump:
# $00078dfc: 41fa 00b0    lea       $78eae(pc),a0
# $00078e00: 7409         moveq     #9,d2
# $00078e02: b098         cmp.l     (a0)+,d0
# $00078e04: 57ca fffc    dbeq      d2,$78e02
# $00078e08: 204a         movea.l   a2,a0
# $00078e0a: 6000 fdca    bra       $78bd6
# ---------
# $00078bd6: 4e71         nop       
# $00078bd8: 4ff8 8606    lea       $ffff8606.w,sp

# Fix the code of the IPL so that, if an invalid checksum is detected,
# sector#10 is re-loaded and the checksum recomputed and reverified.
# Note that in the IPL of AS 1.5, a "nop" has replaced the "bne.s"
# (branch if not equal) to the loading routine (thus disabling the
# validation of the checksum).
# Note also that the "bne.s" must be executed after setting the
# stack pointer to $ffff8606.w.
# In previous versions (AS 1.2 & 1.3), the IPL has a bug: the "bne.s"
# is executed before setting the stack pointer to the expected value.
#
# Replace the following 2 instructions:
#
# $00078bd6: 4e71         nop              ; checksum validation disabled
# $00078bd8: 4ff8 8606    lea       $ffff8606.w,sp
#
# with:
#
# $00078bd6: 4ff8 8606    lea       $ffff8606.w,sp
# $00078bda: 6648         bne.s     $78c24 ; checksum validation re-enabled
#
# $78c24 is the start address of the routine that loads sector#10
# and continues with checksum calculation.
#
# Note that this fix is not needed for the crack, it is only provided to
# show how the validation of the sector#10 checksum is supposed to work.
w $78bd6 $4f $f8 $86 $06 $66 $48

# Dump the 1024 bytes of sector#10
m $7a9d6-$7add6

# Here is the dump obtained when running the STX image:
# $0007A9D6: 53 4f 46 54 20 50 52 4f 54 45 43 54 49 4f 4e 20   SOFT PROTECTION 
# $0007A9E6: 43 4f 44 45 44 42 59 3a 20 4d 72 20 54 52 55 4f   CODEDBY: Mr TRUO
# $0007A9F6: 4e 47 20 4e 47 4f 43 20 50 61 73 63 61 6c 20 54   NG NGOC Pascal T
# $0007AA06: 45 4c 3a 20 34 33 20 33 36 20 35 35 20 39 31 20   EL: 43 36 55 91 
# $0007AA16: 20 20 20 20 20 44 49 53 4b 20 50 52 4f 54 45 43        DISK PROTEC
# $0007AA26: 54 49 4f 4e 20 43 4f 44 45 44 20 42 59 20 4d 72   TION CODED BY Mr
# $0007AA36: 20 42 41 55 54 49 53 54 41 20 46 72 65 64 65 72    BAUTISTA Freder
# $0007AA46: 69 63 20 54 45 4c 3a 20 39 32 20 36 36 20 36 33   ic TEL: 92 66 63
# $0007AA56: 20 31 36 20 69 66 20 79 6f 75 20 61 72 65 20 69    16 if you are i
# $0007AA66: 6e 74 65 72 65 73 74 20 62 79 20 6f 75 72 20 70   nterest by our p
# $0007AA76: 72 6f 74 65 63 74 20 73 6f 2e 2e 2e 00 28 29 c2   rotect so....().
# $0007AA86: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007AA96: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007AAA6: c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2   .().().().().().
# $0007AAB6: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007AAC6: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007AAD6: c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2   .().().().().().
# $0007AAE6: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007AAF6: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007AB06: c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2   .().().().().().
# $0007AB16: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007AB26: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007AB36: c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2   .().().().().().
# $0007AB46: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007AB56: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007AB66: c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2   .().().().().().
# $0007AB76: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007AB86: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007AB96: c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2   .().().().().().
# $0007ABA6: 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28   ().().().().().(
# $0007ABB6: 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29 c2 28 29   ).().().().().()
# $0007ABC6: c2 28 29 c2 28 a1 c2 28 29 14 28 c2 28 28 29 c2   .().(..().(.(().
# $0007ABD6: 4c da f7 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e 4e   L..NNNNNNNNNNNNN
# $0007ABE6: 4e 4e 4e 4e 4e 4e a1 a1 a1 fe 50 00 04 03 6e 1f   NNNNNN....P...n.
# $0007ABF6: 4e 4e 4e 4e a1 a1 a1 fe 50 00 15 03 ec c5 f7 a1   NNNN....P.......
# $0007AC06: a1 a1 a1 fe ef 38 a1 03 1e 2c 00 00 00 00 00 00   .....8...,......
# $0007AC16: 00 00 00 00 2e a9 2a 09 94 34 34 29 2d cd 2e 8d   ......*..44)-...
# $0007AC26: 2c 2d 84 0a 0e 4d ec ee 4c 2d a4 0d 8d ec 2c 84   ,-...M..L-....,.
# $0007AC36: 0b 6e c6 45 c6 0b a4 04 0a 8d a4 06 27 27 07 25   .n.E........''.%
# $0007AC46: 86 27 27 26 04 0a 8d 0e ad cc 8c ae 4a 6d ec ce   .''&........Jm..
# $0007AC56: 84 08 8c ae cc ad 8d ee 0d ac ad ce 98 58 58 5f   .............XX_
# $0007AC66: ca 00 00 20 4c 6d 9e b4 34 3f ca 00 01 60 68 17   ... Lm..4?...`h.
# $0007AC76: de f4 28 2e 8c 2e 4d 25 aa 6a 84 09 2a 09 84 0a   ..(...M%.j..*...
# $0007AC86: 8e 4c 2c 6d 64 04 00 00 14 34 34 3f 7c bc bc bc   .L,md....44?|...
# $0007AC96: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ACA6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ACB6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ACC6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ACD6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ACE6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ACF6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD06: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD16: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD26: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD36: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD46: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD56: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD66: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD76: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD86: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007AD96: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ADA6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ADB6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................
# $0007ADC6: bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc bc   ................

# Modify D0 so that it now contains the correct checksum value.
r d0=$2CD041CD

# When next breakpoint (pc=$78bfc) is hit, execute commands from as15_bp3_4.ini
b pc = $78bfc :trace :once :file as15_bp3_4.ini
