#
# Audio Sculpture 1.5 - IPL Part#3.4 - BKP $78bfc
#
# Neutralize track#3 protection (3rd part):
# Hidden data in gap (HDG),
# sector data with no ID (SNI),
# invalid data in gap (IDG),
# invalid track number (ITN),
# ID within ID (IWI),
# write splice inside sector (SIS).
#
# Track#3 content has been read at $78ed6 ($1860 bytes).
# The protection locates the second sync mark ($C2) of track#3 (see file
# as15_bp3_2.ini) and computes a checksum on $1798 bytes starting from
# that sync mark. Therefore the checksum ignores the first $4a bytes and
# the last $7e bytes of the track. 
# The checksum value is saved at $64 and used to decrypt a small portion
# of code that is executed later.
# In case of a copy, the content of track#3 is incorrect, which leads to
# an invalid checksum value.
# Here, we modify the register (D2) containing the incorrect checksum
# value with the expected value.
#

# Dump the code which computes the checksum of track#3.
d $78bdc-$78c04

# Here is the corresponding dump:
# $00078bdc: 7400         moveq     #0,d2
# $00078bde: 3e3c 05e5    move.w    #$5e5,d7
# $00078be2: 1218         move.b    (a0)+,d1
# $00078be4: e159         rol.w     #8,d1
# $00078be6: d218         add.b     (a0)+,d1
# $00078be8: 0341         bchg      d1,d1
# $00078bea: 4841         swap      d1
# $00078bec: 9218         sub.b     (a0)+,d1
# $00078bee: d281         add.l     d1,d1
# $00078bf0: e159         rol.w     #8,d1
# $00078bf2: d218         add.b     (a0)+,d1
# $00078bf4: d481         add.l     d1,d2
# $00078bf6: e37a         rol.w     d1,d2
# $00078bf8: 51cf ffe8    dbra      d7,$78be2
# $00078bfc: 21c2 0064    move.l    d2,$0064.w
# $00078c00: 6000 fea4    bra       $78aa6

# Modify D2 so that it now contains the correct checksum value
r d2=$4235E822

# Here is the routine that decrypts, using the checksum of track#3,
# some code executed later in the protection.
# Register D0 contains the checksum value (fixed above) and A0
# points to the start of the routine to be decoded.
# The decoding routine (below) is also encrypted: each instruction is
# decrypted on-the-fly using the TVD technique.
#
# $00078af6: b198         eor.l     d0,(a0)+
# $00078af8: e358         rol.w     #1,d0
# $00078afa: 0340         bchg      d1,d0
# $00078afc: 4840         swap      d0
# $00078afe: 0140         bchg      d0,d0
# $00078b00: 51c9 fff4    dbra      d1,$78af6

# When next breakpoint (pc=$3eb60) is hit, execute commands from as15_bp4.ini
b pc = $3eb60 :trace :once :file as15_bp4.ini
